// Package authenticator defines the domain model for user authentication.
package authenticator

import (
	"context"
	"database/sql"
	"time"

	"github.com/dgrijalva/jwt-go"
)

// Credential represents some sensitive value
// to validate user authenticity.
type Credential string

const (
	// Issuer is the issuer of a JWT token.
	Issuer = "authenticator"
)

const (
	// NoPassword specifies User registration and authentication
	// is allowed without a password. This allows user onboarding
	// through verification of an email or SMS token.
	NoPassword = "no_password"
	// Password specifies User registration and authentication
	// must be completed with a password at all times.
	Password = "password"
)

const (
	// IDPhone specifies we allow registration
	// with a phone number.
	IDPhone = "phone"
	// IDEmail specifies we allow registration with
	// an email address.
	IDEmail = "email"
	// IDContact specifies we allow registration with
	// either a phone number or email.
	IDContact = "contact"
)

const (
	// JWTGrant represents a JWT token classification given to users
	// who have completed the first step of a signup or login flow.
	JWTGrant = "grant"
	// JWTBearer represents a JWT token classification given to users
	// who have completed all steps of a signup or login flow.
	JWTBearer = "bearer"
)

const (
	// RequirePassword indicates a user must complete authentication
	// with only a password to retrieve a token. 2FA is not required.
	RequirePassword = "password"
	// RequireTOTP indicates a user must complete authentication
	// with a TOTP code retrieved from email/SMS or through
	// a TOTP generator to retrieve a token.
	RequireTOTP = "totp"
	// RequireDevice indicates a user must complete authentication
	// with a device to retrieve a token.
	RequireDevice = "device"
)

// User represents a user who is registered with the service.
type User struct {
	// ID is a unique ID for the user.
	ID string
	// Phone is a phone number associated with the account.
	Phone sql.NullString
	// Email is an email address associated with the account.
	Email sql.NullString
	// Password is the current User provided password.
	Password string
	// TFASecret is a a secret string used to generate 2FA TOTP codes.
	TFASecret string
	// AuthReq defines a stage of authentication a User
	// requires to be considered authenticated.
	// It may be: password, totp, device
	AuthReq string
	// IsVerified tells us if a user confirmed ownership of
	// an email or phone number by validating a one time code
	// after registration.
	IsVerified bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

// Device represents a device capable of attesting to a User's
// identity. Examples options include a FIDO U2F key or
// fingerprint sensor.
type Device struct {
	// ID is a unique service ID for the device.
	ID string
	// UserID is the User's ID associated with the device
	UserID string
	// ClientID is a non unique ID generated by the client
	// during device registration.
	ClientID []byte
	// PublicKey is the public key of a device used for signing
	// purposes.
	PublicKey []byte
	// Name is a User supplied human readable name for a device.
	Name string
	// AAGUID is the globally unique identifier of the authentication
	// device.
	AAGUID []byte
	// SignCount is the stored signature counter of the device.
	// This value is increment to match the device counter on
	// each successive authentication. If the our value is larger
	// than or equal to the device value, it is indicative that the
	// device may be cloned or malfunctioning.
	SignCount uint32
	CreatedAt time.Time
	UpdatedAt time.Time
}

// LoginHistory represents a login associated with a user.
type LoginHistory struct {
	// TokenID is the ID of a JWT token.
	TokenID string
	// UserID is the User's ID associated with the login record.
	UserID string
	// IsRevoked is a boolean indicating the token has
	// been revoked. Tokens are invalidated through
	// expiry or revocation.
	IsRevoked bool
	// ExpiresAt is the expiry time of the JWT token.
	ExpiresAt time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

// Token is a token that provides proof of User authentication.
type Token struct {
	// jwt.StandardClaims provides standard JWT fields
	// such as Audience, ExpiresAt, Id, Issuer.
	jwt.StandardClaims
	// ClientID is hash of an ID stored in the client for which
	// the token was delivered too. A token is only valid
	// when delivered alongside the unhashed ClientID.
	ClientID string `json:"client_id"`
	// UserID is the User's ID.
	UserID string `json:"user_id"`
	// Email is a User's email.
	Email string `json:"email"`
	// Phone is a User's phone number.
	Phone string `json:"phone"`
	// Class is a classification of the token. It may be
	// a grant, or bearer.
	Class string `json:"classification"`
}

// LoginHistoryRepository represents a local storage for LoginHistory.
type LoginHistoryRepository interface {
	// ByUserID retrieves recent LoginHistory associated with a User's ID.
	// It supports pagination through a limit or offset value.
	ByUserID(ctx context.Context, userID string, limit, offset int) ([]*LoginHistory, error)
	// Create creates a new LoginHistory.
	Create(ctx context.Context, login *LoginHistory) error
	// GetForUpdate retrieves a LoginHistory by TokenID for updating.
	GetForUpdate(ctx context.Context, tokenID string) (*LoginHistory, error)
	// Update updates a LoginHistory.
	Update(ctx context.Context, login *LoginHistory) error
}

// DeviceRepository represents a local storage for Device.
type DeviceRepository interface {
	// ByID returns a Device by it's ID.
	ByID(ctx context.Context, deviceID string) (*Device, error)
	// ByClientID retrieves a Device associated with a User
	// by a ClientID.
	ByClientID(ctx context.Context, userID string, clientID []byte) (*Device, error)
	// ByUserID retreives all Devices associated with a User.
	ByUserID(ctx context.Context, userID string) ([]*Device, error)
	// Create creates a new Device record.
	Create(ctx context.Context, device *Device) error
	// GetForUpdate retrieves a Device by ID for updating.
	GetForUpdate(ctx context.Context, deviceID string) (*Device, error)
	// Update updates a Device.
	Update(ctx context.Context, device *Device) error
}

// UserRepository represents a local storage for User.
type UserRepository interface {
	// ByIdentity retrieves a User by some whitelisted identity
	// value such as email, phone, username, ID.
	ByIdentity(ctx context.Context, attribute, value string) (*User, error)
	// GetForUpdate retrieves a User by ID for updating.
	GetForUpdate(ctx context.Context, userID string) (*User, error)
	// Create creates a new User Record.
	Create(ctx context.Context, u *User) error
	// Update updates a User.
	Update(ctx context.Context, u *User) error
}

// RepositoryManager manages repositories stored in storages
// with atomic properties.
type RepositoryManager interface {
	// NewWithTransaction returns a new manager to with a transaction
	// enabled.
	NewWithTransaction(ctx context.Context) (RepositoryManager, error)
	// WithAtomic performs an operation inside of a transaction.
	// On success, it will return an entity.
	WithAtomic(operation func() (interface{}, error)) (interface{}, error)
	// LoginHistory returns a LoginHistoryRepository.
	LoginHistory() LoginHistoryRepository
	// Device returns a DeviceRepository.
	Device() DeviceRepository
	// User returns a UserRepository.
	User() UserRepository
}

// TokenService represents a service to manage tokens.
type TokenService interface {
	// Create creates a new JWT token. On success, it returns
	// the token and the unhashed ClientID.
	Create(ctx context.Context, user *User) (*Token, string, error)
	// Sign creates a signed JWT token string from a token struct.
	Sign(ctx context.Context, token *Token) (string, error)
	// Validate checks that a JWT token is signed by us, unexpired,
	// and unrevoked. On success it will return the unpacked Token struct.
	Validate(ctx context.Context, signedToken string) (*Token, error)
	// Revoke Revokes a token for a specified duration of time.
	Revoke(ctx context.Context, tokenID string, duration time.Duration) error
}

// LoginService represents a service to authenticate an existing User.
type LoginService interface {
	// BeginLogin is the initial login step to identify a User.
	BeginLogin(ctx context.Context, user *User) error
	// FinishLogin is the final login step to validate a User's authenticity.
	FinishLogin(ctx context.Context, credential Credential) error
}

// SignUpService represents service to create new Users.
type SignUpService interface {
	// BeginSignUp is the initial registration step to identify a User.
	BeginSignUp(ctx context.Context, user *User) error
	// FinishSignUp is the final registration step to validate a new
	// User's authenticity.
	FinishSignUp(ctx context.Context, credential Credential) error
}

// DeviceService represents a service to manage Devices for a User.
type DeviceService interface {
	// ValidateDevice validates ownership of a Device for a User.
	ValidateDevice(ctx context.Context, credential Credential) error
	// AddDevice adds a new Device for a User.
	AddDevice(ctx context.Context, user *User) error
	// RemoveDevice removes a Device associated with a User.
	RemoveDevice(ctx context.Context, user *User) error
}

// UserService represents a service to configure a User.
type UserService interface {
	// Enforce2FA change's a User's authentication requirement.
	Enforce2FA(ctx context.Context, user *User, authReq string) error
	// UpdatePassword change's a User's password.
	UpdatePassword(ctx context.Context, user *User, password string) error
	// RevokeToken revokes a User's token for a logged in session.
	RevokeToken(ctx context.Context, user *User, tokenID string) error
}

// Validator validates a credential.
type Validator interface {
	// TODO Context may not be necessary in this interface
	// Validate validates the authenticity of a credential.
	Validate(ctx context.Context, user *User, credential Credential) error
}
